--- NPB3.3.1.orig/NPB3.3-OMP/UA/transfer.f	2021-01-27 23:17:06.432695255 -0500
+++ NPB3.3.1/NPB3.3-OMP/UA/transfer.f	2020-12-06 23:59:14.801800535 -0500
@@ -12,9 +12,11 @@
 c.....initialize locks in parallel
 c$OMP PARALLEL DO DEFAULT(SHARED) PRIVATE(i)
 c$    do i=1,lmor
-c$      call pcs_enter()
+c       call pcs_enter()
+c$      call no_wait_pcs_enter()
 c$      call omp_init_lock(tlock(i))
-c$      call pcs_exit()
+c$      call no_wait_pcs_exit()
+c       call pcs_exit()
 c$    end do
 
       return
@@ -28,6 +30,7 @@
 c------------------------------------------------------------------
 
       include 'header.h'
+      include 'tern/userF.h'
 
       double precision tmor(*),tx(*), tmp(lx1,lx1,2)
       integer ig1,ig2,ig3,ig4,ie,iface,il1,il2,il3,il4,
@@ -40,6 +43,7 @@
 c$OMP PARALLEL DO DEFAULT(SHARED) PRIVATE(il,j,ig,i,col,ije2,ije1,ig4,
 c$OMP& ig3,ig2,ig1,nnje,il4,il3,il2,il1,iface,ie,tmp)
       do ie=1,nelt
+        call mark_task_start(3)
         do iface=1,nsides
 
 c.........get the collocation point index of the four local corners on the
@@ -249,6 +253,7 @@
           end if
           
         end do
+        call mark_task_end(3)
       end do
 c$OMP END PARALLEL DO
 
@@ -315,11 +320,12 @@
           ig2 = idmo(lx1,1,  1,2,iface,ie)
           ig3 = idmo(1,  lx1,2,1,iface,ie )
           ig4 = idmo(lx1,lx1,2,2,iface,ie)
-
+          
 c.........sum the values from tx to tmor for these four local corners
 c         only 1/3 of the value is summed, since there will be two duplicated
 c         contributions from the other two faces sharing this vertex 
 c
+          call no_wait_pcs_enter()
 c$        call omp_set_lock(tlock(ig1))
           tmor(ig1) = tmor(ig1)+tx(il1)*third
 c$        call omp_unset_lock(tlock(ig1))
@@ -335,7 +341,9 @@
 c$        call omp_set_lock(tlock(ig4))
           tmor(ig4) = tmor(ig4)+tx(il4)*third
 c$        call omp_unset_lock(tlock(ig4))
+          call no_wait_pcs_exit()
 
+          call mark_task_start(4)
 c.........for nonconforming faces
           if(nnje.eq.2) then       
             call r_init(temp,lx1*lx1*2,0.d0)
@@ -374,7 +382,8 @@
                 end do
               end do
             end do
-
+            
+            call mark_task_end(4)
 c...........mapping from temp to tmor
 
             do ije1=1, nnje
@@ -389,10 +398,12 @@
 c                 contribution from another face sharing this edge.
 
                   ig=idmo(v_end(ije2),col,ije1,ije2,iface,ie)
+                  call no_wait_pcs_enter()
 c
 c$                call omp_set_lock(tlock(ig))
                   tmor(ig)=tmor(ig)+temp(v_end(ije2),col,ije1)*0.5d0
 c$                call omp_unset_lock(tlock(ig))
+                  call no_wait_pcs_exit()
 
 c.................In each row of collocation points on a piece of mortar, 
 c                 sum the contributions from interior collocation points 
@@ -404,10 +415,13 @@
                       tmp = tmp + qbnew(i-1,j,ije2) * temp(i,col,ije1)
                     end do
                     ig=idmo(j,col,ije1,ije2,iface,ie)
+
+                    call no_wait_pcs_enter()
 c
 c$                  call omp_set_lock(tlock(ig))
                     tmor(ig)=tmor(ig)+tmp
 c$                  call omp_unset_lock(tlock(ig))
+                    call no_wait_pcs_exit()
                   end do
                 end do
 
@@ -418,10 +432,13 @@
 
                 col = v_end(ije1)
                 ig=idmo(v_end(ije2),col,ije1,ije2,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmor(ig)=tmor(ig)+top(v_end(ije2),ije1)*0.5d0
 c$              call omp_unset_lock(tlock(ig))
+                call no_wait_pcs_exit()
+
                 do  j=1,lx1
                   tmp=0.d0
                   tmp1=0.d0
@@ -430,10 +447,12 @@
                     tmp1 = tmp1 + qbnew(i-1,j,ije2) * top(i,ije1)
                   end do
                   ig=idmo(j,col,ije1,ije2,iface,ie)
+                  call no_wait_pcs_enter()
 c
 c$                call omp_set_lock(tlock(ig))
                   tmor(ig)=tmor(ig)+tmp*0.5d0+tmp1 
 c$                call omp_unset_lock(tlock(ig))
+                  call no_wait_pcs_exit()
                 end do
               end do
             end do
@@ -446,10 +465,12 @@
               do j=2,lx1-1
                 il=idel(j,col,iface,ie)
                 ig=idmo(j,col,1,1,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmor(ig)=tmor(ig)+tx(il)
 c$              call omp_unset_lock(tlock(ig))
+                call no_wait_pcs_exit()
               end do
             end do
 
@@ -465,10 +486,12 @@
                     tmp= tmp + qbnew(i-1,j,ije)*tx(il)
                   end do
                   ig=idmo(j,1,1,ije,iface,ie)
+                  call no_wait_pcs_enter()
 c
 c$                call omp_set_lock(tlock(ig))
                   tmor(ig)=tmor(ig)+tmp*0.5d0
 c$                call omp_unset_lock(tlock(ig))
+                  call no_wait_pcs_exit()
                 end do
               end do
 
@@ -477,10 +500,12 @@
               do j=2,lx1-1
                 il=idel(j,1,iface,ie)
                 ig=idmo(j,1,1,1,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmor(ig)=tmor(ig)+tx(il)*0.5d0
 c$              call omp_unset_lock(tlock(ig))
+                call no_wait_pcs_exit()
               end do
             end if 
 
@@ -494,10 +519,12 @@
                     tmp = tmp + qbnew(i-1,j,ije)*tx(il)
                   end do
                   ig=idmo(lx1,j,ije,2,iface,ie)
+                  call no_wait_pcs_enter()
 c
 c$                call omp_set_lock(tlock(ig))
                   tmor(ig)=tmor(ig)+tmp*0.5d0
 c$                call omp_unset_lock(tlock(ig))
+                  call no_wait_pcs_exit()
                 end do
               end do
 
@@ -506,10 +533,12 @@
               do j=2,lx1-1
                 il=idel(lx1,j,iface,ie)
                 ig=idmo(lx1,j,1,1,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmor(ig)=tmor(ig)+tx(il)*0.5d0
 c$              call omp_unset_lock(tlock(ig))
+                call no_wait_pcs_exit()
               end do
             end if 
 
@@ -523,10 +552,12 @@
                     tmp = tmp + qbnew(i-1,j,ije)*tx(il)
                   end do
                   ig=idmo(j,lx1,2,ije,iface,ie)
+                  call no_wait_pcs_enter()
 c
 c$                call omp_set_lock(tlock(ig))
                   tmor(ig)=tmor(ig)+tmp*0.5d0
 c$                call omp_unset_lock(tlock(ig))
+                  call no_wait_pcs_exit()
                 end do
               end do
 
@@ -535,10 +566,12 @@
               do j=2,lx1-1
                 il=idel(j,lx1,iface,ie)
                 ig=idmo(j,lx1,1,1,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmor(ig)=tmor(ig)+tx(il)*0.5d0
 c$              call omp_unset_lock(tlock(ig))
+                call no_wait_pcs_exit()
               end do
             end if 
 
@@ -552,10 +585,12 @@
                     tmp = tmp + qbnew(i-1,j,ije)*tx(il)
                   end do
                   ig=idmo(1,j,ije,1,iface,ie)
+                  call no_wait_pcs_enter()
 c
 c$                call omp_set_lock(tlock(ig))
                   tmor(ig)=tmor(ig)+tmp*0.5d0
 c$                call omp_unset_lock(tlock(ig))
+                  call no_wait_pcs_exit()
                 end do
               end do
 
@@ -564,10 +599,12 @@
               do j=2,lx1-1
                 il=idel(1,j,iface,ie)
                 ig=idmo(1,j,1,1,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmor(ig)=tmor(ig)+tx(il)*0.5d0
 c$              call omp_unset_lock(tlock(ig))
+                call no_wait_pcs_exit()
               end do
             end if 
           end if
@@ -600,6 +637,8 @@
 c-------------------------------------------------------------------
 
       include 'header.h'
+      include 'tern/userF.h'
+c!$          use omp_lib
 
       double precision tmor,tx(lx1,lx1,lx1),tmp
       integer i,n
@@ -920,6 +959,7 @@
             ig2 = idmo(lx1,1,  1,2,iface,ie)
             ig3 = idmo(1,  lx1,2,1,iface,ie)
             ig4 = idmo(lx1,lx1,2,2,iface,ie)
+            call no_wait_pcs_enter()
 c
 c$          call omp_set_lock(tlock(ig1))
             tmort(ig1) = tmort(ig1)+tx(il1)*third
@@ -937,14 +977,19 @@
             tmort(ig4) = tmort(ig4)+tx(il4)*third
 c$          call omp_unset_lock(tlock(ig4))
 
+            call no_wait_pcs_exit()
+
             do  col=2,lx1-1
               do j=2,lx1-1
                 il=idel(j,col,iface,ie)
                 ig=idmo(j,col,1,1,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmort(ig)=tmort(ig)+tx(il)
 c$              call omp_unset_lock(tlock(ig))
+                
+                call no_wait_pcs_exit()
               end do
             end do
 
@@ -952,10 +997,12 @@
               do j=2,lx1-1
                 il=idel(j,1,iface,ie)
                 ig=idmo(j,1,1,1,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmort(ig)=tmort(ig)+tx(il)*0.5d0
 c$              call omp_unset_lock(tlock(ig))
+                call no_wait_pcs_exit()
               end do
             end if
 
@@ -963,10 +1010,12 @@
               do j=2,lx1-1
                 il=idel(lx1,j,iface,ie)
                 ig=idmo(lx1,j,1,1,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmort(ig)=tmort(ig)+tx(il)*0.5d0
 c$              call omp_unset_lock(tlock(ig))
+                call no_wait_pcs_exit()
               end do
             end if
 
@@ -974,10 +1023,12 @@
               do j=2,lx1-1
                 il=idel(j,lx1,iface,ie)
                 ig=idmo(j,lx1,1,1,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmort(ig)=tmort(ig)+tx(il)*0.5d0
 c$              call omp_unset_lock(tlock(ig))
+                call no_wait_pcs_exit()
               end do
             end if
 
@@ -985,10 +1036,12 @@
               do j=2,lx1-1
                 il=idel(1,j,iface,ie)
                 ig=idmo(1,j,1,1,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmort(ig)=tmort(ig)+tx(il)*0.5d0
 c$              call omp_unset_lock(tlock(ig))
+                call no_wait_pcs_exit()
               end do
             end if
           end if!
@@ -1056,6 +1109,7 @@
             ig2 = idmo(lx1,1,  1,2,iface,ie)
             ig3 = idmo(1,  lx1,2,1,iface,ie)
             ig4 = idmo(lx1,lx1,2,2,iface,ie)
+            call no_wait_pcs_enter()
 c
 c$          call omp_set_lock(tlock(ig1))
             tmort(ig1) = tmort(ig1)+tx(il1)*third
@@ -1076,16 +1130,19 @@
             tmort(ig4) = tmort(ig4)+tx(il4)*third
             mormult(ig4) = mormult(ig4)+third
 c$          call omp_unset_lock(tlock(ig4))
+            call no_wait_pcs_exit()
 
             do  col=2,lx1-1
               do j=2,lx1-1
                 il=idel(j,col,iface,ie)
                 ig=idmo(j,col,1,1,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmort(ig)=tmort(ig)+tx(il)
                 mormult(ig)=mormult(ig)+1.d0
 c$              call omp_unset_lock(tlock(ig))
+                call no_wait_pcs_exit()
               end do
             end do
 
@@ -1093,11 +1150,13 @@
               do j=2,lx1-1
                 il=idel(j,1,iface,ie)
                 ig=idmo(j,1,1,1,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmort(ig)=tmort(ig)+tx(il)*0.5d0
                 mormult(ig)=mormult(ig)+0.5d0
 c$              call omp_unset_lock(tlock(ig))
+                call no_wait_pcs_exit()
               end do
             end if
 
@@ -1105,11 +1164,13 @@
               do j=2,lx1-1
                 il=idel(lx1,j,iface,ie)
                 ig=idmo(lx1,j,1,1,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmort(ig)=tmort(ig)+tx(il)*0.5d0
                 mormult(ig)=mormult(ig)+0.5d0
 c$              call omp_unset_lock(tlock(ig))
+                call no_wait_pcs_exit()
               end do
             end if
 
@@ -1117,11 +1178,13 @@
               do j=2,lx1-1
                 il=idel(j,lx1,iface,ie)
                 ig=idmo(j,lx1,1,1,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmort(ig)=tmort(ig)+tx(il)*0.5d0
                 mormult(ig)=mormult(ig)+0.5d0
 c$              call omp_unset_lock(tlock(ig))
+                call no_wait_pcs_exit()
                end do
             end if
 
@@ -1129,11 +1192,13 @@
               do j=2,lx1-1
                 il=idel(1,j,iface,ie)
                 ig=idmo(1,j,1,1,iface,ie)
+                call no_wait_pcs_enter()
 c
 c$              call omp_set_lock(tlock(ig))
                 tmort(ig)=tmort(ig)+tx(il)*0.5d0
                 mormult(ig)=mormult(ig)+0.5d0
 c$              call omp_unset_lock(tlock(ig))
+                call no_wait_pcs_exit()
               end do
             end if
           end if!nnje=1
--- NPB3.3.1.orig/NPB3.3-OMP/UA/mason.f	2007-03-22 12:55:54.000000000 -0400
+++ NPB3.3.1/NPB3.3-OMP/UA/mason.f	2020-12-06 23:22:45.191363109 -0500
@@ -1520,6 +1520,7 @@
 c-----------------------------------------------------------------
  
        include 'header.h'
+       include 'tern/userF.h'
 
        integer ie, n, ntemp, i,ng
        logical L1
@@ -1529,12 +1530,14 @@
          if (emo(1,i,n).eq.ie) L1=.true.
        end do
        if (.not.L1) then
+         call no_wait_pcs_enter()
 c$       call omp_set_lock(tlock(n))
          ntemp=nemo(n)+1
          nemo(n)=ntemp
          emo(1,ntemp,n)=ie
          emo(2,ntemp,n)=ng
 c$       call omp_unset_lock(tlock(n))
+         call no_wait_pcs_exit()
        end if
 
        return
