diff -Naur parsec-3.0/ext/splash2x/apps/fmm/src/construct_grid.C parsec-3.0-sigmetrics/ext/splash2x/apps/fmm/src/construct_grid.C
--- parsec-3.0/ext/splash2x/apps/fmm/src/construct_grid.C	2013-07-28 10:39:56.000000000 -0400
+++ parsec-3.0-sigmetrics/ext/splash2x/apps/fmm/src/construct_grid.C	2021-08-08 20:51:14.540526294 -0400
@@ -22,6 +22,7 @@
 #include "box.h"
 #include "partition_grid.h"
 #include "construct_grid.h"
+#include "tern/user.h"
 
 #define MY_PARTICLES     (Local[my_id].Particles)
 #define MY_NUM_PARTICLES (Local[my_id].Num_Particles)
@@ -750,6 +751,7 @@
       UNLOCK(G_Memory->single_lock);
    }
    else {
+      no_wait_pcs_enter();
       ALOCK(G_Memory->lock_array, pb->particle_lock_index);
       if (pb->children[b->child_num] == NULL) {
 	 pb->children[b->child_num] = b;
@@ -760,6 +762,7 @@
       else
 	 success = FALSE;
       AULOCK(G_Memory->lock_array, pb->particle_lock_index);
+      no_wait_pcs_exit();
    }
    if (success == TRUE)
       InsertSubtreeInPartition(my_id, b);
@@ -783,6 +786,7 @@
       UNLOCK(G_Memory->single_lock);
    }
    else {
+      no_wait_pcs_enter();
       ALOCK(G_Memory->lock_array, pb->particle_lock_index);
       if (pb->children[b->child_num] == b) {
 	 pb->children[b->child_num] = NULL;
@@ -793,6 +797,7 @@
       else
 	 success = FALSE;
       AULOCK(G_Memory->lock_array, pb->particle_lock_index);
+      no_wait_pcs_exit();
    }
    return success;
 }
diff -Naur parsec-3.0/ext/splash2x/apps/fmm/src/cost_zones.C parsec-3.0-sigmetrics/ext/splash2x/apps/fmm/src/cost_zones.C
--- parsec-3.0/ext/splash2x/apps/fmm/src/cost_zones.C	2021-10-27 03:54:50.778870805 -0400
+++ parsec-3.0-sigmetrics/ext/splash2x/apps/fmm/src/cost_zones.C	2021-10-15 22:28:55.375709948 -0400
@@ -19,6 +19,7 @@
 #include "box.h"
 #include "partition_grid.h"
 #include "cost_zones.h"
+#include "tern/user.h"
 
 #define NUM_DIRECTIONS 4
 
@@ -69,19 +70,23 @@
    box *pb;
 
    if (b->type == PARENT) {
+      no_wait_pcs_enter(); // do not enforce shced_yield
       while (b->interaction_synch != b->num_children) {
          sched_yield();
       }
+      no_wait_pcs_exit();
    }
    b->interaction_synch = 0;
    ComputeCostOfBox(b);
    b->subtree_cost += b->cost;
    pb = b->parent;
    if (pb != NULL) {
+      no_wait_pcs_enter();
       ALOCK(G_Memory->lock_array, pb->exp_lock_index);
       pb->subtree_cost += b->subtree_cost;
       pb->interaction_synch += 1;
       AULOCK(G_Memory->lock_array, pb->exp_lock_index);
+      no_wait_pcs_exit();
    }
 }
 
diff -Naur parsec-3.0/ext/splash2x/apps/fmm/src/fmm.C parsec-3.0-sigmetrics/ext/splash2x/apps/fmm/src/fmm.C
--- parsec-3.0/ext/splash2x/apps/fmm/src/fmm.C	2021-10-27 03:54:51.158870326 -0400
+++ parsec-3.0-sigmetrics/ext/splash2x/apps/fmm/src/fmm.C	2021-08-08 20:51:14.580526561 -0400
@@ -298,7 +298,9 @@
    PartitionIterate(my_id, UpwardPass, BOTTOM);
    if (time_all)
       CLOCK(upward_end);
+   mark_task_start(3);
    PartitionIterate(my_id, ComputeInteractions, BOTTOM);
+   unmark_task(3);
    pcs_barrier_exit(0, Number_Of_Processors);
    if (time_all)
       CLOCK(interaction_end);
diff -Naur parsec-3.0/ext/splash2x/apps/fmm/src/interactions.C parsec-3.0-sigmetrics/ext/splash2x/apps/fmm/src/interactions.C
--- parsec-3.0/ext/splash2x/apps/fmm/src/interactions.C	2021-10-27 03:54:50.778870805 -0400
+++ parsec-3.0-sigmetrics/ext/splash2x/apps/fmm/src/interactions.C	2021-10-15 22:29:41.039863103 -0400
@@ -22,6 +22,7 @@
 #include "box.h"
 #include "partition_grid.h"
 #include "interactions.h"
+#include "tern/user.h"
 
 static real Inv[MAX_EXPANSION_TERMS + 1];
 static real OverInc[MAX_EXPANSION_TERMS + 1];
@@ -91,23 +92,30 @@
 void
 UpwardPass (long my_id, box *b)
 {
+   mark_task_start(1);
    InitExp(b);
    if (b->type == CHILDLESS) {
       ComputeMPExp(b);
+      no_wait_pcs_enter();
       ALOCK(G_Memory->lock_array, b->exp_lock_index);
       b->interaction_synch = 1;
       AULOCK(G_Memory->lock_array, b->exp_lock_index);
+      no_wait_pcs_exit();
    }
    else {
+      no_wait_pcs_enter(); // do not enforce shced_yield
       while (b->interaction_synch != b->num_children) {
 	     sched_yield();
       }
+      no_wait_pcs_exit();
    }
    if (b->parent != NULL) {
       ShiftMPExp(b, b->parent);
+      no_wait_pcs_enter();
       ALOCK(G_Memory->lock_array, b->parent->exp_lock_index);
       b->parent->interaction_synch += 1;
       AULOCK(G_Memory->lock_array, b->parent->exp_lock_index);
+      no_wait_pcs_exit();
    }
 }
 
@@ -129,9 +137,11 @@
 DownwardPass (long my_id, box *b)
 {
    if (b->parent != NULL) {
+      no_wait_pcs_enter(); // do not enforce shced_yield
       while (b->parent->interaction_synch != 0) {
 	     sched_yield();
       }
+      no_wait_pcs_exit();
       ShiftLocalExp(b->parent, b);
    }
    if (b->type == CHILDLESS) {
@@ -139,9 +149,11 @@
       b->interaction_synch = 0;
    }
    else {
+      no_wait_pcs_enter();
       ALOCK(G_Memory->lock_array, b->exp_lock_index);
       b->interaction_synch = 0;
       AULOCK(G_Memory->lock_array, b->exp_lock_index);
+      no_wait_pcs_exit();
    }
 }
 
@@ -246,12 +258,16 @@
 	 COMPLEX_MUL(z0_pow_n, z0_pow_n, z0);
       }
    }
+   mark_task_end(1);
+   // slock_next_n(4);
+   no_wait_pcs_enter();
    ALOCK(G_Memory->lock_array, b->exp_lock_index);
    for (i = 0; i < Expansion_Terms; i++) {
       b->mp_expansion[i].r = result_exp[i].r;
       b->mp_expansion[i].i = result_exp[i].i;
    }
    AULOCK(G_Memory->lock_array, b->exp_lock_index);
+   no_wait_pcs_exit();
 }
 
 
@@ -300,11 +316,14 @@
       COMPLEX_MUL(z0_pow_n, z0_pow_n, z0);
       COMPLEX_MUL(result_exp[i], temp, z0_pow_n);
    }
+   // slock_next_n(4);
+   no_wait_pcs_enter();
    ALOCK(G_Memory->lock_array, pb->exp_lock_index);
    for (i = 0; i < Expansion_Terms; i++) {
       COMPLEX_ADD((pb->mp_expansion[i]), (pb->mp_expansion[i]), result_exp[i]);
    }
    AULOCK(G_Memory->lock_array, pb->exp_lock_index);
+   no_wait_pcs_exit();
 }
 
 
@@ -363,6 +382,7 @@
    long i;
    long j;
 
+   no_wait_pcs_enter(); // do not enforce shced_yield
    if (source_box->type == CHILDLESS) {
       while (source_box->interaction_synch != 1) {
 	    sched_yield();
@@ -373,6 +393,7 @@
 	    sched_yield();
       }
    }
+   no_wait_pcs_exit();
 
    source_pos.r = source_box->x_center;
    source_pos.i = source_box->y_center;
@@ -442,6 +463,7 @@
    long i;
    long j;
 
+   no_wait_pcs_enter(); // do not enforce shced_yield
    if (source_box->type == CHILDLESS) {
       while (source_box->interaction_synch != 1) {
 	    sched_yield();
@@ -452,6 +474,7 @@
         sched_yield();
       }
    }
+   no_wait_pcs_exit();
 
    source_pos.r = source_box->x_center;
    source_pos.i = source_box->y_center;
@@ -509,12 +532,16 @@
 	 COMPLEX_ADD(result_exp[j], result_exp[j], temp);
       }
    }
+   mark_task_end(3);
+   no_wait_pcs_enter();
    ALOCK(G_Memory->lock_array, dest_box->exp_lock_index);
    for (i = 0; i < Expansion_Terms; i++) {
       COMPLEX_SUB((dest_box->x_expansion[i]),
 		  (dest_box->x_expansion[i]), result_exp[i]);
    }
    AULOCK(G_Memory->lock_array, dest_box->exp_lock_index);
+   no_wait_pcs_exit();
+   mark_task_start(3);
    source_box->cost += X_LIST_COST(source_box->num_particles, Expansion_Terms);
 }
 
@@ -619,12 +646,14 @@
       COMPLEX_MUL(result_exp[i], temp, z0_pow_minus_n);
       COMPLEX_MUL(z0_pow_minus_n, z0_pow_minus_n, z0_inv);
    }
+   no_wait_pcs_enter();
    ALOCK(G_Memory->lock_array, cb->exp_lock_index);
    for (i = 0; i < Expansion_Terms; i++) {
       COMPLEX_ADD((cb->local_expansion[i]), (cb->local_expansion[i]),
 		  result_exp[i]);
    }
    AULOCK(G_Memory->lock_array, cb->exp_lock_index);
+   no_wait_pcs_exit();
 }
 
 
